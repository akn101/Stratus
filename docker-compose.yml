# Docker Compose configuration for Stratus ERP Integration Service
# For development and testing - production uses external Supabase/Postgres

version: '3.8'

services:
  stratus:
    build: .
    container_name: stratus-erp
    restart: unless-stopped
    environment:
      # Database configuration (uses external Supabase in production)
      DATABASE_URL: ${DATABASE_URL}
      
      # Integration API credentials (from .env file)
      SHOPIFY_SHOP: ${SHOPIFY_SHOP:-}
      SHOPIFY_ACCESS_TOKEN: ${SHOPIFY_ACCESS_TOKEN:-}
      SHOPIFY_API_VERSION: ${SHOPIFY_API_VERSION:-2024-07}
      
      SHIPBOB_TOKEN: ${SHIPBOB_TOKEN:-}
      SHIPBOB_BASE: ${SHIPBOB_BASE:-https://api.shipbob.com/2025-07}
      
      FREEAGENT_ACCESS_TOKEN: ${FREEAGENT_ACCESS_TOKEN:-}
      
      # Amazon SP-API (disabled by default)
      AMZ_ACCESS_TOKEN: ${AMZ_ACCESS_TOKEN:-}
      AMZ_REFRESH_TOKEN: ${AMZ_REFRESH_TOKEN:-}
      AMZ_CLIENT_ID: ${AMZ_CLIENT_ID:-}
      AMZ_CLIENT_SECRET: ${AMZ_CLIENT_SECRET:-}
      AMZ_MARKETPLACE_IDS: ${AMZ_MARKETPLACE_IDS:-}
      
      # Application configuration
      PYTHONPATH: /app
      TZ: UTC
    ports:
      - "8000:8000"  # Metrics and health check port
    volumes:
      - ./config:/app/config:ro  # Mount configuration
      - logs:/app/logs  # Persistent logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - stratus-network

  # Local PostgreSQL for development/testing
  # In production, use external Supabase instance
  postgres:
    image: postgres:15-alpine
    container_name: stratus-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: stratus
      POSTGRES_USER: stratus
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-stratus_dev_password}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U stratus -d stratus"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - stratus-network

  # Optional: pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: stratus-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@stratus.local}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "8080:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - stratus-network
    profiles:
      - tools  # Only start with --profile tools

  # Optional: Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: stratus-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    depends_on:
      - stratus
    networks:
      - stratus-network
    profiles:
      - monitoring  # Only start with --profile monitoring

  # Optional: Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: stratus-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - stratus-network
    profiles:
      - monitoring  # Only start with --profile monitoring

volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  logs:
    driver: local

networks:
  stratus-network:
    driver: bridge